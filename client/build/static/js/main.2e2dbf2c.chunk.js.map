{"version":3,"sources":["assets/react-pokeball.svg","components/modal/modal.jsx","components/pokedex/pokedex.jsx","App.js","index.js"],"names":["module","exports","MyModal","props","type","useState","pokemons","setPokemon","body","url","pokemon","useEffect","length","fetch","method","headers","JSON","stringify","then","res","json","types","name","Modal","size","aria-labelledby","centered","Header","closeButton","src","sprites","front_default","alt","Title","id","Body","Badge","pill","variant","style","wordBreak","height","weight","stats","base_stat","base_experience","Pokedex","page","setPage","params","setParams","modalShow","setModalShow","infoUrl","setInfoUrl","data","GrabData","allData","AllData","results","filter","poke","includes","toLowerCase","className","Form","Row","Group","as","Col","Control","onChange","e","target","value","placeholder","Button","hidden","previous","onClick","next","Table","striped","bordered","hover","map","key","replace","show","onHide","App","require","width","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e2dbf2c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react-pokeball.a531dfa9.svg\";","import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { Button, Table, Modal, Badge, Form, Col } from \"react-bootstrap\";\n\nfunction MyModal(props) {\n  const [pokemons, setPokemon] = useState(null);\n  //console.log(props.pokemon);\n  const body = {\n    url: props.pokemon,\n  };\n\n  useEffect(() => {\n    if (body.url.length > 0) {\n      fetch(\"api/pokeinfo/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body),\n      })\n        .then((res) => res.json())\n        .then((pokemon) => setPokemon(pokemon));\n    }\n  }, [props]);\n  //if (pokemons != null) console.log(pokemons);\n  if (pokemons != null) {\n    let type;\n    if (pokemons.types[0].type.name === \"grass\") {\n      type = \"success\";\n    } else if (pokemons.types[0].type.name === \"bug\") {\n      type = \"success\";\n    } else if (pokemons.types[0].type.name === \"fire\") {\n      type = \"danger\";\n    } else if (pokemons.types[0].type.name === \"water\") {\n      type = \"primary\";\n    } else if (pokemons.types[0].type.name === \"electric\") {\n      type = \"warning\";\n    } else {\n      type = \"info\";\n    }\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <img src={pokemons.sprites.front_default} alt=\"\"></img>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            {pokemons.name}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Badge pill variant={type}>\n            {pokemons.types[0].type.name}\n          </Badge>\n          <h3>Stats</h3>\n          <div style={{ wordBreak: \"break-all\" }}>\n            <span>height: </span>\n            <span>{pokemons.height}</span>\n          </div>\n          <div style={{ wordBreak: \"break-all\" }}>\n            <span>weight: </span>\n            <span>{pokemons.weight}</span>\n          </div>\n          <div style={{ wordBreak: \"break-all\" }}>\n            <span>Base Power: </span>\n            <span>{pokemons.stats[0].base_stat}</span>\n          </div>\n          <div style={{ wordBreak: \"break-all\" }}>\n            <span>Base XP: </span>\n            <span>{pokemons.base_experience}</span>\n          </div>\n        </Modal.Body>\n      </Modal>\n    );\n  } else {\n    return (\n      <Modal\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">Loading</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h1>modal</h1>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n}\n\nexport default MyModal;\n","import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { Button, Table, Form, Col } from \"react-bootstrap\";\nimport MyModal from \"../modal/modal\";\nimport \"./pokedex.css\";\n\n// function MyModal(props) {\n//   const [pokemons, setPokemon] = useState(null);\n//   //console.log(props.pokemon);\n//   const body = {\n//     url: props.pokemon,\n//   };\n\n//   useEffect(() => {\n//     if (body.url.length > 0) {\n//       fetch(\"api/pokeinfo/\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(body),\n//       })\n//         .then((res) => res.json())\n//         .then((pokemon) => setPokemon(pokemon));\n//     }\n//   }, [props]);\n//   //if (pokemons != null) console.log(pokemons);\n//   if (pokemons != null) {\n//     let type;\n//     if (pokemons.types[0].type.name === \"grass\") {\n//       type = \"success\";\n//     } else if (pokemons.types[0].type.name === \"bug\") {\n//       type = \"success\";\n//     } else if (pokemons.types[0].type.name === \"fire\") {\n//       type = \"danger\";\n//     } else if (pokemons.types[0].type.name === \"water\") {\n//       type = \"primary\";\n//     } else if (pokemons.types[0].type.name === \"electric\") {\n//       type = \"warning\";\n//     } else {\n//       type = \"info\";\n//     }\n//     return (\n//       <Modal\n//         {...props}\n//         size=\"lg\"\n//         aria-labelledby=\"contained-modal-title-vcenter\"\n//         centered\n//       >\n//         <Modal.Header closeButton>\n//           <img src={pokemons.sprites.front_default} alt=\"\"></img>\n//           <Modal.Title id=\"contained-modal-title-vcenter\">\n//             {pokemons.name}\n//           </Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <Badge pill variant={type}>\n//             {pokemons.types[0].type.name}\n//           </Badge>\n//           <h3>Stats</h3>\n//           <div style={{ wordBreak: \"break-all\" }}>\n//             <span>height: </span>\n//             <span>{pokemons.height}</span>\n//           </div>\n//           <div style={{ wordBreak: \"break-all\" }}>\n//             <span>weight: </span>\n//             <span>{pokemons.weight}</span>\n//           </div>\n//           <div style={{ wordBreak: \"break-all\" }}>\n//             <span>Base Power: </span>\n//             <span>{pokemons.stats[0].base_stat}</span>\n//           </div>\n//           <div style={{ wordBreak: \"break-all\" }}>\n//             <span>Base XP: </span>\n//             <span>{pokemons.base_experience}</span>\n//           </div>\n//         </Modal.Body>\n//       </Modal>\n//     );\n//   } else {\n//     return (\n//       <Modal\n//         {...props}\n//         size=\"lg\"\n//         aria-labelledby=\"contained-modal-title-vcenter\"\n//         centered\n//       >\n//         <Modal.Header closeButton>\n//           <Modal.Title id=\"contained-modal-title-vcenter\">Loading</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <h1>modal</h1>\n//         </Modal.Body>\n//       </Modal>\n//     );\n//   }\n// }\n\nfunction GrabData(page) {\n  const [pokemons, setPokemon] = useState([]);\n  const body = {\n    page: page,\n  };\n  useEffect(() => {\n    fetch(\"/api/pokemon/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((res) => res.json())\n      .then((pokemon) => setPokemon(pokemon));\n  }, [page]);\n  return pokemons;\n}\n\nfunction AllData() {\n  const [pokemons, setPokemon] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/api/allpokemon/\")\n      .then((res) => res.json())\n      .then((pokemon) => setPokemon(pokemon));\n  }, []);\n  return pokemons;\n}\n\nfunction Pokedex() {\n  const [page, setPage] = useState(0);\n  const [params, setParams] = useState(\"\");\n  const [modalShow, setModalShow] = useState(false); //modal state\n  const [infoUrl, setInfoUrl] = useState(\"\");\n  let data = GrabData(page);\n  let allData = AllData().results;\n\n  let pokemons = data.results;\n  if (pokemons != null && params.length > 0) {\n    pokemons = allData;\n    pokemons = pokemons.filter(function (poke) {\n      return poke.name.includes(params.toLowerCase());\n    });\n  }\n\n  function handleClickNext() {\n    let newPage = page + 10;\n    setPage(newPage);\n    // GrabData(page);\n  }\n  function handleClickPrev() {\n    let newPage = page - 10;\n    setPage(newPage);\n  }\n\n  function moreInfo(url) {\n    setInfoUrl(url);\n    setModalShow(true);\n  }\n  function onParamChange(e) {\n    setParams(e.target.value);\n  }\n\n  if (pokemons != null) {\n    return (\n      <div className=\"pokeContainer\">\n        <Form className=\"mb-4\">\n          <Form.Row className=\"align-items-end\">\n            <Form.Group as={Col}>\n              <Form.Control\n                onChange={onParamChange}\n                name=\"description\"\n                type=\"text\"\n                placeholder=\"Search Pokedex\"\n              />\n            </Form.Group>\n          </Form.Row>\n        </Form>\n        <Button\n          className=\"mb-3\"\n          variant=\"success\"\n          hidden={!data.previous}\n          onClick={handleClickPrev}\n        >\n          Prev\n        </Button>\n        <Button\n          className=\"mb-3 addbtn\"\n          variant=\"success\"\n          hidden={!data.next}\n          onClick={handleClickNext}\n        >\n          Next\n        </Button>\n\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Name</th>\n              <th>Info</th>\n            </tr>\n          </thead>\n          <tbody>\n            {pokemons.map((pokemon) => (\n              <tr key={pokemon.url}>\n                <td>\n                  {pokemon.url\n                    .replace(\"https://pokeapi.co/api/v2/pokemon/\", \"\")\n                    .replace(\"/\", \"\")}\n                </td>\n                <td>{pokemon.name}</td>\n                <td>\n                  <Button\n                    variant=\"info\"\n                    onClick={() => {\n                      moreInfo(pokemon.url);\n                    }}\n                  >\n                    info\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n        <MyModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n          pokemon={infoUrl}\n        />\n      </div>\n    );\n  } else return <h1>loading</h1>;\n}\n\nexport default Pokedex;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Pokedex from \"./components/pokedex/pokedex\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img\n          alt=\"\"\n          src={require(\"../src/assets/react-pokeball.svg\")}\n          width=\"130\"\n          height=\"130\"\n        />\n        <h1>React Pokedex</h1>\n      </header>\n      <Pokedex />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}