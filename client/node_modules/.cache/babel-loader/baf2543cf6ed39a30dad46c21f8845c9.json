{"ast":null,"code":"var _jsxFileName = \"/Users/miguelzambrano/Desktop/mern-tinq-api/client/src/components/pokedex/pokedex.jsx\";\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { Button, Table, Form, Col } from \"react-bootstrap\";\nimport MyModal from \"../modal/modal\"; // function MyModal(props) {\n//   const [pokemons, setPokemon] = useState(null);\n//   //console.log(props.pokemon);\n//   const body = {\n//     url: props.pokemon,\n//   };\n//   useEffect(() => {\n//     if (body.url.length > 0) {\n//       fetch(\"api/pokeinfo/\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(body),\n//       })\n//         .then((res) => res.json())\n//         .then((pokemon) => setPokemon(pokemon));\n//     }\n//   }, [props]);\n//   //if (pokemons != null) console.log(pokemons);\n//   if (pokemons != null) {\n//     let type;\n//     if (pokemons.types[0].type.name === \"grass\") {\n//       type = \"success\";\n//     } else if (pokemons.types[0].type.name === \"bug\") {\n//       type = \"success\";\n//     } else if (pokemons.types[0].type.name === \"fire\") {\n//       type = \"danger\";\n//     } else if (pokemons.types[0].type.name === \"water\") {\n//       type = \"primary\";\n//     } else if (pokemons.types[0].type.name === \"electric\") {\n//       type = \"warning\";\n//     } else {\n//       type = \"info\";\n//     }\n//     return (\n//       <Modal\n//         {...props}\n//         size=\"lg\"\n//         aria-labelledby=\"contained-modal-title-vcenter\"\n//         centered\n//       >\n//         <Modal.Header closeButton>\n//           <img src={pokemons.sprites.front_default} alt=\"\"></img>\n//           <Modal.Title id=\"contained-modal-title-vcenter\">\n//             {pokemons.name}\n//           </Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <Badge pill variant={type}>\n//             {pokemons.types[0].type.name}\n//           </Badge>\n//           <h3>Stats</h3>\n//           <div style={{ wordBreak: \"break-all\" }}>\n//             <span>height: </span>\n//             <span>{pokemons.height}</span>\n//           </div>\n//           <div style={{ wordBreak: \"break-all\" }}>\n//             <span>weight: </span>\n//             <span>{pokemons.weight}</span>\n//           </div>\n//           <div style={{ wordBreak: \"break-all\" }}>\n//             <span>Base Power: </span>\n//             <span>{pokemons.stats[0].base_stat}</span>\n//           </div>\n//           <div style={{ wordBreak: \"break-all\" }}>\n//             <span>Base XP: </span>\n//             <span>{pokemons.base_experience}</span>\n//           </div>\n//         </Modal.Body>\n//       </Modal>\n//     );\n//   } else {\n//     return (\n//       <Modal\n//         {...props}\n//         size=\"lg\"\n//         aria-labelledby=\"contained-modal-title-vcenter\"\n//         centered\n//       >\n//         <Modal.Header closeButton>\n//           <Modal.Title id=\"contained-modal-title-vcenter\">Loading</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <h1>modal</h1>\n//         </Modal.Body>\n//       </Modal>\n//     );\n//   }\n// }\n\nfunction GrabData(page) {\n  const [pokemons, setPokemon] = useState([]);\n  const body = {\n    page: page\n  };\n  useEffect(() => {\n    fetch(\"/api/pokemon/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    }).then(res => res.json()).then(pokemon => setPokemon(pokemon));\n  }, [page]);\n  return pokemons;\n}\n\nfunction AllData() {\n  const [pokemons, setPokemon] = useState([]);\n  useEffect(() => {\n    fetch(\"/api/allpokemon/\").then(res => res.json()).then(pokemon => setPokemon(pokemon));\n  }, []);\n  return pokemons;\n}\n\nfunction Pokedex() {\n  const [page, setPage] = useState(0);\n  const [params, setParams] = useState(\"\");\n  const [modalShow, setModalShow] = useState(false); //modal state\n\n  const [infoUrl, setInfoUrl] = useState(\"\");\n  let data = GrabData(page);\n  let allData = AllData().results;\n  let pokemons = data.results;\n\n  if (pokemons != null && params.length > 0) {\n    pokemons = allData;\n    pokemons = pokemons.filter(function (poke) {\n      return poke.name.includes(params.toLowerCase());\n    });\n  }\n\n  function handleClickNext() {\n    let newPage = page + 10;\n    setPage(newPage); // GrabData(page);\n  }\n\n  function handleClickPrev() {\n    let newPage = page - 10;\n    setPage(newPage);\n  }\n\n  function moreInfo(url) {\n    setInfoUrl(url);\n    setModalShow(true);\n  }\n\n  function onParamChange(e) {\n    setParams(e.target.value);\n  }\n\n  if (pokemons != null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form.Row, {\n      className: \"align-items-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 15\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(Form.Control, {\n      onChange: onParamChange //value=\"param\" //description search\n      ,\n      name: \"description\",\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(Button, {\n      hidden: !data.previous,\n      onClick: handleClickPrev,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }\n    }, \"previous\"), /*#__PURE__*/React.createElement(Button, {\n      hidden: !data.next,\n      onClick: handleClickNext,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }\n    }, \"next\"), /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }\n    }, \"#\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 15\n      }\n    }, \"Info\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }\n    }, pokemons.map(pokemon => /*#__PURE__*/React.createElement(\"tr\", {\n      key: pokemon.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }\n    }, pokemon.url.replace(\"https://pokeapi.co/api/v2/pokemon/\", \"\").replace(\"/\", \"\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }\n    }, pokemon.name), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: () => {\n        moreInfo(pokemon.url);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 19\n      }\n    }, \"info\")))))), /*#__PURE__*/React.createElement(MyModal, {\n      show: modalShow,\n      onHide: () => setModalShow(false),\n      pokemon: infoUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }\n    }));\n  } else return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }\n  }, \"loading\");\n}\n\nexport default Pokedex;","map":{"version":3,"sources":["/Users/miguelzambrano/Desktop/mern-tinq-api/client/src/components/pokedex/pokedex.jsx"],"names":["React","useState","useEffect","Button","Table","Form","Col","MyModal","GrabData","page","pokemons","setPokemon","body","fetch","method","headers","JSON","stringify","then","res","json","pokemon","AllData","Pokedex","setPage","params","setParams","modalShow","setModalShow","infoUrl","setInfoUrl","data","allData","results","length","filter","poke","name","includes","toLowerCase","handleClickNext","newPage","handleClickPrev","moreInfo","url","onParamChange","e","target","value","previous","next","map","replace"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,EAA8BC,GAA9B,QAAyC,iBAAzC;AACA,OAAOC,OAAP,MAAoB,gBAApB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,QAAM,CAACC,QAAD,EAAWC,UAAX,IAAyBV,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAMW,IAAI,GAAG;AACXH,IAAAA,IAAI,EAAEA;AADK,GAAb;AAGAP,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,KAAK,CAAC,eAAD,EAAkB;AACrBC,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFY;AAKrBH,MAAAA,IAAI,EAAEI,IAAI,CAACC,SAAL,CAAeL,IAAf;AALe,KAAlB,CAAL,CAOGM,IAPH,CAOSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPjB,EAQGF,IARH,CAQSG,OAAD,IAAaV,UAAU,CAACU,OAAD,CAR/B;AASD,GAVQ,EAUN,CAACZ,IAAD,CAVM,CAAT;AAWA,SAAOC,QAAP;AACD;;AAED,SAASY,OAAT,GAAmB;AACjB,QAAM,CAACZ,QAAD,EAAWC,UAAX,IAAyBV,QAAQ,CAAC,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","sourcesContent":["import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { Button, Table, Form, Col } from \"react-bootstrap\";\nimport MyModal from \"../modal/modal\";\n\n// function MyModal(props) {\n//   const [pokemons, setPokemon] = useState(null);\n//   //console.log(props.pokemon);\n//   const body = {\n//     url: props.pokemon,\n//   };\n\n//   useEffect(() => {\n//     if (body.url.length > 0) {\n//       fetch(\"api/pokeinfo/\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(body),\n//       })\n//         .then((res) => res.json())\n//         .then((pokemon) => setPokemon(pokemon));\n//     }\n//   }, [props]);\n//   //if (pokemons != null) console.log(pokemons);\n//   if (pokemons != null) {\n//     let type;\n//     if (pokemons.types[0].type.name === \"grass\") {\n//       type = \"success\";\n//     } else if (pokemons.types[0].type.name === \"bug\") {\n//       type = \"success\";\n//     } else if (pokemons.types[0].type.name === \"fire\") {\n//       type = \"danger\";\n//     } else if (pokemons.types[0].type.name === \"water\") {\n//       type = \"primary\";\n//     } else if (pokemons.types[0].type.name === \"electric\") {\n//       type = \"warning\";\n//     } else {\n//       type = \"info\";\n//     }\n//     return (\n//       <Modal\n//         {...props}\n//         size=\"lg\"\n//         aria-labelledby=\"contained-modal-title-vcenter\"\n//         centered\n//       >\n//         <Modal.Header closeButton>\n//           <img src={pokemons.sprites.front_default} alt=\"\"></img>\n//           <Modal.Title id=\"contained-modal-title-vcenter\">\n//             {pokemons.name}\n//           </Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <Badge pill variant={type}>\n//             {pokemons.types[0].type.name}\n//           </Badge>\n//           <h3>Stats</h3>\n//           <div style={{ wordBreak: \"break-all\" }}>\n//             <span>height: </span>\n//             <span>{pokemons.height}</span>\n//           </div>\n//           <div style={{ wordBreak: \"break-all\" }}>\n//             <span>weight: </span>\n//             <span>{pokemons.weight}</span>\n//           </div>\n//           <div style={{ wordBreak: \"break-all\" }}>\n//             <span>Base Power: </span>\n//             <span>{pokemons.stats[0].base_stat}</span>\n//           </div>\n//           <div style={{ wordBreak: \"break-all\" }}>\n//             <span>Base XP: </span>\n//             <span>{pokemons.base_experience}</span>\n//           </div>\n//         </Modal.Body>\n//       </Modal>\n//     );\n//   } else {\n//     return (\n//       <Modal\n//         {...props}\n//         size=\"lg\"\n//         aria-labelledby=\"contained-modal-title-vcenter\"\n//         centered\n//       >\n//         <Modal.Header closeButton>\n//           <Modal.Title id=\"contained-modal-title-vcenter\">Loading</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <h1>modal</h1>\n//         </Modal.Body>\n//       </Modal>\n//     );\n//   }\n// }\n\nfunction GrabData(page) {\n  const [pokemons, setPokemon] = useState([]);\n  const body = {\n    page: page,\n  };\n  useEffect(() => {\n    fetch(\"/api/pokemon/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((res) => res.json())\n      .then((pokemon) => setPokemon(pokemon));\n  }, [page]);\n  return pokemons;\n}\n\nfunction AllData() {\n  const [pokemons, setPokemon] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/api/allpokemon/\")\n      .then((res) => res.json())\n      .then((pokemon) => setPokemon(pokemon));\n  }, []);\n  return pokemons;\n}\n\nfunction Pokedex() {\n  const [page, setPage] = useState(0);\n  const [params, setParams] = useState(\"\");\n  const [modalShow, setModalShow] = useState(false); //modal state\n  const [infoUrl, setInfoUrl] = useState(\"\");\n  let data = GrabData(page);\n  let allData = AllData().results;\n\n  let pokemons = data.results;\n  if (pokemons != null && params.length > 0) {\n    pokemons = allData;\n    pokemons = pokemons.filter(function (poke) {\n      return poke.name.includes(params.toLowerCase());\n    });\n  }\n\n  function handleClickNext() {\n    let newPage = page + 10;\n    setPage(newPage);\n    // GrabData(page);\n  }\n  function handleClickPrev() {\n    let newPage = page - 10;\n    setPage(newPage);\n  }\n\n  function moreInfo(url) {\n    setInfoUrl(url);\n    setModalShow(true);\n  }\n  function onParamChange(e) {\n    setParams(e.target.value);\n  }\n\n  if (pokemons != null) {\n    return (\n      <div>\n        <Form className=\"mb-4\">\n          <Form.Row className=\"align-items-end\">\n            <Form.Group as={Col}>\n              <Form.Label>Description</Form.Label>\n              <Form.Control\n                onChange={onParamChange}\n                //value=\"param\" //description search\n                name=\"description\"\n                type=\"text\"\n              />\n            </Form.Group>\n          </Form.Row>\n        </Form>\n        <Button hidden={!data.previous} onClick={handleClickPrev}>\n          previous\n        </Button>\n        <Button hidden={!data.next} onClick={handleClickNext}>\n          next\n        </Button>\n\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Name</th>\n              <th>Info</th>\n            </tr>\n          </thead>\n          <tbody>\n            {pokemons.map((pokemon) => (\n              <tr key={pokemon.url}>\n                <td>\n                  {pokemon.url\n                    .replace(\"https://pokeapi.co/api/v2/pokemon/\", \"\")\n                    .replace(\"/\", \"\")}\n                </td>\n                <td>{pokemon.name}</td>\n                <td>\n                  <Button\n                    onClick={() => {\n                      moreInfo(pokemon.url);\n                    }}\n                  >\n                    info\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n        <MyModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n          pokemon={infoUrl}\n        />\n      </div>\n    );\n  } else return <h1>loading</h1>;\n}\n\nexport default Pokedex;\n"]},"metadata":{},"sourceType":"module"}